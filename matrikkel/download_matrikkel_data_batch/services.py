"""Utils for matrikkel module."""
import os
from io import BytesIO
from posixpath import join as urljoin
from typing import List, Optional, Tuple

from google.cloud import pubsub_v1, storage
from innbyggerkontakt.gcp import get_secret
from lxml import etree
from lxml.etree import _Element, _ElementTree
from matrikkel_models import MatrikkelEnhet, MatrikkelEnheter
from suds.client import Client


# used in xpath-queries
XML_NAMESPACES = {
    'domain': 'http://matrikkel.statkart.no/matrikkelapi/wsapi/v1/domain',
    'matrikkelenhet': 'http://matrikkel.statkart.no/matrikkelapi/wsapi/v1/domain/matrikkelenhet',
    'instance': 'http://www.w3.org/2001/XMLSchema-instance',
}


def create_matrikkel_context(nedlasting_client: Client):
    """Create a matrikkel context required in matrikkel api requests.

    A matrikkel context sets up settings for the matrikkel requests.

    Args:
        nedlasting_client (suds nedlastings_client): nedlasting client generated by suds

    Returns:
        matrikkel_context: matrikkel context
    """
    timestamp = nedlasting_client.factory.create('ns0:Timestamp')
    timestamp.timestamp = '9999-01-01T00:00:00+01:00'

    matrikkel_context = nedlasting_client.factory.create('ns0:MatrikkelContext')

    snap_version = nedlasting_client.factory.create('ns0:Timestamp')
    snap_version.timestamp = (
        '9999-01-01T00:00:00+01:00'  # gives the live version of matrikkelen
    )
    matrikkel_context.locale = 'no_NO_B'
    matrikkel_context.brukOriginaleKoordinater = True
    matrikkel_context.koordinatsystemKodeId = {'value': 24}
    matrikkel_context.systemVersion = '4.4.1'
    matrikkel_context.klientIdentifikasjon = 'minKlient'
    matrikkel_context.snapshotVersion = snap_version

    return matrikkel_context


def request_matrikkel_enheter_batch_element_tree(
    municipality_number: str, from_matrikkel_id: int
) -> _ElementTree:
    """Downloads matrikkel units as lxml element tree.

    Args:
        municipality_number (str): municipality number
        from_matrikkel_id (int): download matrikkel units from this id and up

    Returns:
        _ElementTree: element tree
    """
    p, u = get_secret('MATRIKKEL_PASSWORD'), get_secret('MATRIKKEL_USERNAME')

    MATRIKKEL_URL = urljoin(
        os.getenv('MATRIKKEL_ENDPOINT', ''), 'matrikkelapi/wsapi/v1'
    )
    NEDLASTING_WSDL_URL = urljoin(MATRIKKEL_URL, 'NedlastningServiceWS?WSDL')

    nedlasting_client = Client(NEDLASTING_WSDL_URL, username=u, password=p, timeout=300)
    nedlasting_client.set_options(retxml=True)

    domain_klasse_enum = nedlasting_client.factory.create('ns10:Domainklasse')
    matrikkel_enhet_klasse = domain_klasse_enum.Matrikkelenhet

    municipality_filter = str({'kommunefilter': [municipality_number]})

    matrikkel_context = create_matrikkel_context(nedlasting_client)

    download_from_matrikkel_id = nedlasting_client.factory.create(
        'ns28:MatrikkelenhetId'
    )
    download_from_matrikkel_id.value = from_matrikkel_id

    xml_bytes = BytesIO(
        nedlasting_client.service.findObjekterEtterId(
            download_from_matrikkel_id,
            matrikkel_enhet_klasse,
            municipality_filter,
            5000,
            matrikkel_context,
        )
    )

    tree = etree.parse(source=xml_bytes)

    return tree


def largest_id_and_length(
    matrikkel_element_tree: _ElementTree,
) -> Tuple[Optional[int], int]:
    """Get the largest id and the number of ids in the element tree.

    Args:
        matrikkel_element_tree (_ElementTree): element tree

    Returns:
        tuple[int or None, int]: [largest id, number of ids]
    """
    id_elements = matrikkel_element_tree.xpath(
        './/domain:id', namespaces=XML_NAMESPACES
    )

    try:
        largest_id = int(id_elements[-1].getchildren()[0].text)
    except (ValueError, IndexError):
        largest_id = None

    return largest_id, len(id_elements)


def get_matrikkel_units_with_person_owners(
    matrikkel_element_tree: _ElementTree,
) -> List[_Element]:
    """Get matrikkel units that has PersonTinglystEierforhold and is tinglyst.

    Args:
        matrikkel_element_tree (_ElementTree): element tree

    Returns:
        List[_Element]: list of matrikkel units
    """
    tinglyste_eiendommer = matrikkel_element_tree.xpath(
        ".//domain:item[ \
                matrikkelenhet:eierforhold[ \
                    matrikkelenhet:item[ \
                        @instance:type='ns5:PersonTinglystEierforhold' \
                    ] \
                ] \
                and matrikkelenhet:tinglyst[text()='true'] \
            ]",
        namespaces=XML_NAMESPACES,
    )

    return tinglyste_eiendommer


def create_matrikkel_enheter_list(
    tinglyste_eiendommer,
) -> MatrikkelEnheter:
    """Create matrikkel enheter object that contains list of matrikkel units with owners.

    Args:
        tinglyste_eiendommer (_type_): tinglyste eiendommer

    Returns:
        MatrikkelEnheter: Object with list of matrikkel units
    """
    matrikkel_enheter: MatrikkelEnheter = MatrikkelEnheter(matrikkel_enheter_list=[])

    for t in tinglyste_eiendommer:
        matrikkel_enhet_id = (
            t.find(
                './/domain:id',
                namespaces=XML_NAMESPACES,
            )
            .getchildren()[0]
            .text
        )

        eiere = [
            e.getchildren()[0].text
            for e in t.findall('.//matrikkelenhet:eierId', namespaces=XML_NAMESPACES)
        ]

        matrikkel_enhet = MatrikkelEnhet(id=matrikkel_enhet_id, owners=eiere)

        matrikkel_enheter.matrikkel_enheter_list.append(matrikkel_enhet)

    return matrikkel_enheter


def update_matrikkel_data_in_storage(
    matrikkel_enheter: MatrikkelEnheter, municipality_number: str, batch_number: int
) -> str:
    """Update matrikkel data in storage.

    Args:
        matrikkel_enheter (MatrikkelEnheter): matrikkel units
        municipality_number (str): municipality number

    Returns:
        str: retults?
    """
    # todo last opp i Ã©n fil
    bucket_name = os.environ.get('GCP_PROJECT')
    blob_name = f'matrikkel/matrikkel_copy/{municipality_number}/matrikkel_enheter.json'

    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(blob_name)

    # delete data if first batch
    if batch_number == 0 and blob.exists():
        blob.delete()

    if blob.exists():
        data = blob.download_as_text()

        matrikkel_data_from_storage = MatrikkelEnheter.parse_raw(data)
        matrikkel_data_from_storage.matrikkel_enheter_list.extend(
            matrikkel_enheter.matrikkel_enheter_list
        )

        blob.upload_from_string(matrikkel_data_from_storage.json())
    else:
        blob.upload_from_string(matrikkel_enheter.json())

    return blob.path


def publish_to_pubsub(topic: str, encoded_message: str) -> str:
    """Publish to pubsub topic.

    Args:
        topic (str): the pubsub topic.
        encoded_message (str): utf-8 encoded message.

    Returns:
        str: result
    """
    project_id = os.environ.get('GCP_PROJECT')
    publisher = pubsub_v1.PublisherClient()
    topic_path = publisher.topic_path(project_id, topic)
    future = publisher.publish(topic_path, encoded_message)

    return future.result()
