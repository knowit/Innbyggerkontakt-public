# pylint: disable-all
"""add_aggregated_attributes

Revision ID: 62ce27586767
Revises: 1e15a13c7111
Create Date: 2021-03-26 13:37:50.544532

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm.session import Session
from sqlalchemy import Column, String, DateTime, Integer, ForeignKey
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from sqlalchemy_utils import aggregated
from sqlalchemy.ext.declarative import declarative_base


Base = declarative_base()


# revision identifiers, used by Alembic.
revision = '62ce27586767'
down_revision = '1e15a13c7111'
branch_labels = None
depends_on = None


class Bulletin(Base):
    __table_args__ = {'schema': 'innbyggerkontakt_outcome', 'extend_existing': True}
    __tablename__ = 'bulletin'
    bulletin_id = Column(String, primary_key=True)
    organization_id = Column(String, nullable=False)
    datetime_created = Column(DateTime(timezone=True), default=func.now())
    last_updated = Column(DateTime(timezone=True))

    recipients_sum = relationship('Recipients')
    message_sum = relationship('Message')

    @aggregated('recipients_sum', Column(Integer))
    def freg_total_hits(self):
        return func.coalesce(func.sum(Recipients.hits), 0)

    @aggregated('message_sum', Column(Integer))
    def not_reserved(self):
        return func.coalesce(func.sum(Message.not_reserved), 0)

    @aggregated('message_sum', Column(Integer))
    def reserved(self):
        return func.coalesce(func.sum(Message.reserved), 0)

    @aggregated('message_sum', Column(Integer))
    def not_active(self):
        return func.coalesce(func.sum(Message.not_active), 0)

    @aggregated('message_sum', Column(Integer))
    def deleted(self):
        return func.coalesce(func.sum(Message.deleted), 0)

    @aggregated('message_sum', Column(Integer))
    def mails_sent(self):
        return func.coalesce(func.sum(Message.mails_sent), 0)


class Message(Base):
    __table_args__ = {'schema': 'innbyggerkontakt_outcome', 'extend_existing': True}
    __tablename__ = 'message'
    id = Column(Integer, primary_key=True, autoincrement=True)
    bulletin_id = Column(String, ForeignKey(Bulletin.bulletin_id), nullable=False)
    not_reserved = Column(Integer)
    reserved = Column(Integer)
    not_active = Column(Integer)
    deleted = Column(Integer)
    mails_sent = Column(Integer)
    datetime_created = Column(DateTime(timezone=True), default=func.now())
    pubsub_id = Column(String, unique=True, nullable=False)

    bulletin = relationship(Bulletin)


class Recipients(Base):
    __table_args__ = {'schema': 'innbyggerkontakt_outcome', 'extend_existing': True}
    __tablename__ = 'recipients'
    id = Column(Integer, primary_key=True, autoincrement=True)
    bulletin_id = Column(String, ForeignKey(Bulletin.bulletin_id), nullable=False)
    hits = Column(Integer)
    datetime_created = Column(DateTime(timezone=True), default=func.now())
    pubsub_id = Column(String, unique=True, nullable=False)

    bulletin = relationship(Bulletin)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('bulletin', sa.Column('last_updated', sa.DateTime()), schema='innbyggerkontakt_outcome')
    op.add_column('bulletin', sa.Column('deleted', sa.Integer(), nullable=True), schema='innbyggerkontakt_outcome')
    op.add_column('bulletin', sa.Column('freg_total_hits', sa.Integer(), nullable=True),
                  schema='innbyggerkontakt_outcome')
    op.add_column('bulletin', sa.Column('mails_sent', sa.Integer(), nullable=True), schema='innbyggerkontakt_outcome')
    op.add_column('bulletin', sa.Column('not_active', sa.Integer(), nullable=True), schema='innbyggerkontakt_outcome')
    op.add_column('bulletin', sa.Column('not_reserved', sa.Integer(), nullable=True), schema='innbyggerkontakt_outcome')
    op.add_column('bulletin', sa.Column('reserved', sa.Integer(), nullable=True), schema='innbyggerkontakt_outcome')
    op.drop_constraint('message_bulletin_id_fkey', 'message', schema='innbyggerkontakt_outcome', type_='foreignkey')
    op.create_foreign_key('message_bulletin_id_fkey', 'message', 'bulletin', ['bulletin_id'], ['bulletin_id'],
                          source_schema='innbyggerkontakt_outcome', referent_schema='innbyggerkontakt_outcome',
                          ondelete='CASCADE')
    op.drop_constraint('recipients_bulletin_id_fkey', 'recipients', schema='innbyggerkontakt_outcome',
                       type_='foreignkey')
    op.create_foreign_key('recipients_bulletin_id_fkey', 'recipients', 'bulletin', ['bulletin_id'], ['bulletin_id'],
                          source_schema='innbyggerkontakt_outcome', referent_schema='innbyggerkontakt_outcome',
                          ondelete='CASCADE')

    session = Session(bind=op.get_bind())
    recipients_labels = ['bulletin_id', 'last_updated', 'freg_total_hits']
    recipients = session.query(Recipients.bulletin_id,
                               func.max(Recipients.datetime_created),
                               func.sum(Recipients.hits)).group_by(
                                   Recipients.bulletin_id).all()
    messages_labels = ['bulletin_id', 'last_updated', 'not_reserved', 'reserved', 'not_active', 'deleted', 'mails_sent']
    messages = session.query(Message.bulletin_id,
                             func.max(Message.datetime_created),
                             func.sum(Message.not_reserved),
                             func.sum(Message.reserved),
                             func.sum(Message.not_active),
                             func.sum(Message.deleted),
                             func.sum(Message.mails_sent)).group_by(Message.bulletin_id).all()

    recipients = [dict(zip(recipients_labels, recipient)) for recipient in recipients]
    messages = [dict(zip(messages_labels, message)) for message in messages]
    bulletin_updates = {}

    for element in [ele for sublist in [recipients, messages] for ele in sublist]:
        bulletin = bulletin_updates.get(element['bulletin_id'])
        if bulletin:
            last_updated = bulletin['last_updated']
            bulletin.update(element)
            if last_updated > bulletin['last_updated']:
                bulletin['last_updated'] = last_updated
        else:
            bulletin_updates[element['bulletin_id']] = element

    for bulletin in session.query(Bulletin):
        bulletin.last_updated = bulletin_updates.get(bulletin.bulletin_id, {}).get('last_updated') \
            or bulletin.datetime_created
        bulletin.freg_total_hits = bulletin_updates.get(bulletin.bulletin_id, {}).get('freg_total_hits') or 0
        bulletin.not_reserved = bulletin_updates.get(bulletin.bulletin_id, {}).get('not_reserved') or 0
        bulletin.reserved = bulletin_updates.get(bulletin.bulletin_id, {}).get('reserved') or 0
        bulletin.not_active = bulletin_updates.get(bulletin.bulletin_id, {}).get('not_active') or 0
        bulletin.deleted = bulletin_updates.get(bulletin.bulletin_id, {}).get('deleted') or 0
        bulletin.mails_sent = bulletin_updates.get(bulletin.bulletin_id, {}).get('mails_sent') or 0
    session.commit()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('recipients_bulletin_id_fkey', 'recipients', schema='innbyggerkontakt_outcome',
                       type_='foreignkey')
    op.create_foreign_key('recipients_bulletin_id_fkey', 'recipients', 'bulletin', ['bulletin_id'], ['bulletin_id'],
                          source_schema='innbyggerkontakt_outcome', referent_schema='innbyggerkontakt_outcome',
                          ondelete='CASCADE')
    op.drop_constraint('message_bulletin_id_fkey', 'message', schema='innbyggerkontakt_outcome', type_='foreignkey')
    op.create_foreign_key('message_bulletin_id_fkey', 'message', 'bulletin', ['bulletin_id'], ['bulletin_id'],
                          source_schema='innbyggerkontakt_outcome', referent_schema='innbyggerkontakt_outcome',
                          ondelete='CASCADE')
    op.drop_column('bulletin', 'last_updated', schema='innbyggerkontakt_outcome')
    op.drop_column('bulletin', 'reserved', schema='innbyggerkontakt_outcome')
    op.drop_column('bulletin', 'not_reserved', schema='innbyggerkontakt_outcome')
    op.drop_column('bulletin', 'not_active', schema='innbyggerkontakt_outcome')
    op.drop_column('bulletin', 'mails_sent', schema='innbyggerkontakt_outcome')
    op.drop_column('bulletin', 'freg_total_hits', schema='innbyggerkontakt_outcome')
    op.drop_column('bulletin', 'deleted', schema='innbyggerkontakt_outcome')
    # ### end Alembic commands ###
